package com.app.tts.services;

import com.app.tts.error.exception.OracleException;
import com.app.tts.util.AppParams;
import com.app.tts.util.DBProcedureUtil;
import com.app.tts.util.ParamUtil;
import io.netty.handler.codec.http.HttpResponseStatus;
import oracle.jdbc.internal.OracleTypes;

import javax.sql.DataSource;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class UserService {
    private static DataSource dataSource;

    public static void setDataSource(DataSource dataSource) {
        UserService.dataSource = dataSource;
    }

    public static final String INSERT_USER = "{call PKG_QUY.create_user(?,?,?,?,?,?,?,?,?)}";
    public static final String GET_USER_BY_EMAIL = "{call PKG_QUY.get_user_by_email(?,?,?,?)}";
    public static final String GET_ALL_CUS = "{call PKG_QUY.get_all_user(?,?,?,?)}";
    public static Map getUserByEmail(String email) throws SQLException {

        Map inputParams = new LinkedHashMap();
        inputParams.put(1, email);

        Map<Integer, Integer> outputParamsTypes = new LinkedHashMap<>();
        outputParamsTypes.put(2, OracleTypes.NUMBER);
        outputParamsTypes.put(3, OracleTypes.VARCHAR);
        outputParamsTypes.put(4, OracleTypes.CURSOR);

        Map<Integer, String> outputParamsNames = new LinkedHashMap<>();
        outputParamsNames.put(2, AppParams.RESULT_CODE);
        outputParamsNames.put(3, AppParams.RESULT_MSG);
        outputParamsNames.put(4, AppParams.RESULT_DATA);

        Map searchResultMap = DBProcedureUtil.execute(dataSource, GET_USER_BY_EMAIL, inputParams, outputParamsTypes,
                outputParamsNames);

        int resultCode = ParamUtil.getInt(searchResultMap, AppParams.RESULT_CODE);

        if (resultCode != HttpResponseStatus.OK.code()) {
            throw new OracleException(ParamUtil.getString(searchResultMap, AppParams.RESULT_MSG));
        }

        Map resultMap = new HashMap();
        List<Map> resultDataList = ParamUtil.getListData(searchResultMap, AppParams.RESULT_DATA);

        if (!resultDataList.isEmpty()) {
            resultMap = format(resultDataList.get(0));
        }

        LOGGER.info("=> GET USER result2: " + resultMap);
        return resultMap;
    }
    public static List<Map> insertUser(String email, String password, String username, String address, String state,
                                 String phone) throws SQLException {

        Map inputParams = new LinkedHashMap<Integer, String>();
        inputParams.put(1, email);
        inputParams.put(2, password);
        inputParams.put(3, username);
        inputParams.put(4, address);
        inputParams.put(5, phone);
        inputParams.put(6, state);


        Map<Integer, Integer> outputParamsTypes = new LinkedHashMap<>();
        outputParamsTypes.put(7, OracleTypes.NUMBER);
        outputParamsTypes.put(8, OracleTypes.VARCHAR);
        outputParamsTypes.put(9, OracleTypes.CURSOR);

        Map<Integer, String> outputParamsNames = new LinkedHashMap<>();
        outputParamsNames.put(7, AppParams.RESULT_CODE);
        outputParamsNames.put(8, AppParams.RESULT_MSG);
        outputParamsNames.put(9, AppParams.RESULT_DATA);

        Map searchResultMap = DBProcedureUtil.execute(dataSource, INSERT_USER, inputParams, outputParamsTypes,
                outputParamsNames);

        int resultCode = ParamUtil.getInt(searchResultMap, AppParams.RESULT_CODE);

        if (resultCode != HttpResponseStatus.CREATED.code()) {
            throw new OracleException(ParamUtil.getString(searchResultMap, AppParams.RESULT_MSG));
        }

        Map resultMap = new HashMap<>();
        List<Map> resultDataList = ParamUtil.getListData(searchResultMap, AppParams.RESULT_DATA);

        LOGGER.info("=> register result: " + ParamUtil.getListData(searchResultMap, AppParams.RESULT_DATA));

        return resultDataList;
    }
    public static List<Map> getAllUser(String state) throws SQLException, OracleException {

        Map inputParams = new LinkedHashMap<Integer, String>();
        inputParams.put(1, state);

        Map<Integer, Integer> outputParamsTypes = new LinkedHashMap<>();
        outputParamsTypes.put(2, OracleTypes.NUMBER);
        outputParamsTypes.put(3, OracleTypes.VARCHAR);
        outputParamsTypes.put(4, OracleTypes.CURSOR);

        Map<Integer, String> outputParamsNames = new LinkedHashMap<>();
        outputParamsNames.put(2, AppParams.RESULT_CODE);
        outputParamsNames.put(3, AppParams.RESULT_MSG);
        outputParamsNames.put(4, AppParams.RESULT_DATA);

        Map searchResultMap = DBProcedureUtil.execute(dataSource, GET_ALL_CUS, inputParams, outputParamsTypes,
                outputParamsNames);

        int resultCode = ParamUtil.getInt(searchResultMap, AppParams.RESULT_CODE);

        if (resultCode != HttpResponseStatus.OK.code()) {
            throw new OracleException(ParamUtil.getString(searchResultMap, AppParams.RESULT_MSG));
        }

        Map resultMap = new HashMap<>();
        List<Map> resultDataList = ParamUtil.getListData(searchResultMap, AppParams.RESULT_DATA);

        LOGGER.info("=> All user result: " + ParamUtil.getListData(searchResultMap, AppParams.RESULT_DATA));

        return resultDataList;
    }



    private static Map format(Map queryData) throws SQLException {

        Map resultMap = new LinkedHashMap<>();
        resultMap.put(AppParams.ID, ParamUtil.getString(queryData, AppParams.S_ID));
        resultMap.put(AppParams.EMAIL, ParamUtil.getString(queryData, AppParams.S_EMAIL));
        resultMap.put(AppParams.PASSWORD, ParamUtil.getString(queryData, AppParams.S_PASSWORD));
        resultMap.put(AppParams.USERNAME, ParamUtil.getString(queryData, AppParams.S_USERNAME));
        resultMap.put(AppParams.ADDRESS, ParamUtil.getString(queryData, AppParams.S_ADDRESS));
        resultMap.put(AppParams.PHONE, ParamUtil.getString(queryData, AppParams.S_PHONE));
        resultMap.put(AppParams.STATE, ParamUtil.getString(queryData, AppParams.S_STATE));
        resultMap.put(AppParams.CREATE_AT, ParamUtil.getString(queryData, AppParams.D_CREATED_AT));
        resultMap.put(AppParams.UPDATE_AT, ParamUtil.getString(queryData, AppParams.D_UPDATED_AT));


        return resultMap;
    }


    private static final Logger LOGGER = Logger.getLogger(UserService.class.getName());
}